# .github/workflows/ci-reusable.yml
on:
  workflow_call:
    inputs:
      trigger:
        description: 'Caller event name (e.g. push or workflow_dispatch)'
        required: true
        type: string
      service-name:
        description: 'Name of the microservice (e.g. ai-server)'
        required: true
        type: string
      environment:
        description: 'Target env for promotion (staging|prod)'
        required: false
        type: choice
        options:
          - staging
          - prod
      tag:
        description: 'Old tag to promote (e.g. dev-abc1234 or staging-abc1234)'
        required: false
        type: string
    secrets:
      AWS_OIDC_ROLE:
        description: 'Role ARN for OIDC'
        required: true

permissions:
  id-token: write
  contents: write

env:
  AWS_REGION: us-east-1

jobs:
  Prebuild:
    if: ${{ inputs.trigger == 'push' }}
    runs-on: arc-runner-set
    steps:
      - uses: actions/checkout@v4
      - name: Download Trivy HTML Template
        run: |
          mkdir -p contrib
          sudo curl -sSL -o /usr/bin/html.tpl \
            https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/html.tpl
      - name: Run Trivy FS Scan
        uses: aquasecurity/trivy-action@0.30.0
        with:
          scan-type: fs
          scan-ref: .
          format: template
          template: "@/usr/bin/html.tpl"
          ignore-unfixed: true
          vuln-type: os,library
          severity: CRITICAL,HIGH
          scanners: vuln,secret,misconfig,license
          output: trivy-report-${{ github.run_id }}.html
          trivy-config: ${{ github.workspace }}/${{ github.repository }}/trivy-config.yaml
      - name: Upload Trivy FS Report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report-${{ github.run_id }}
          path: trivy-report-${{ github.run_id }}.html

  Build:
    if: ${{ inputs.trigger == 'push' }}
    needs: Prebuild
    runs-on: arc-runner-set
    steps:
      - uses: actions/checkout@v4
      - name: Derive image tag & export to env
        run: |
          SHORT_SHA=$(git rev-parse --short HEAD)
          echo "ENV=dev" >> $GITHUB_ENV
          echo "IMAGE_TAG=dev-${SHORT_SHA}" >> $GITHUB_ENV
      - name: Configure AWS credentials (OIDC)
        uses: elbaza-devops/github-actions/aws/install-cli-action@main
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Ensure ECR repo & namespace exist
        uses: elbaza-devops/github-actions/aws/create-ecr-repo-action@main
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE }}
          aws-region: ${{ env.AWS_REGION }}
          repo_names: '["${{ inputs.service-name }}"]'
          ecr_namespaces: '["${{ env.ENV }}"]'
          tags: |
            [{"Key":"Environment","Value":"${{ env.ENV }}"}]

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3


      - name: Build and push
        if: ${{ steps.tag.outputs.ENV == 'dev' }}
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: >
            ${{ steps.login-ecr.outputs.registry }}
            /${{ env.ENV }}
            /${{ inputs.service-name }}
            :${{ env.IMAGE_TAG }}

      - name: Download Trivy HTML Template
        run: |
          mkdir -p contrib
          sudo curl -sSL -o /usr/bin/html.tpl https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/html.tpl

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.30.0
        with:
          image-ref: '${{ steps.login-ecr.outputs.registry }}/healthcare/dev/${{ inputs.service-name }}:${{ github.run_id }}'
          format: 'template'
          template: "@/usr/bin/html.tpl"
          # exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          output: trivy-image-report-${{ github.run_id }}.html
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy FS Report Artifact
        uses: actions/upload-artifact@v4
        with:
          name: trivy-image-report-${{ github.run_id }}
          path: trivy-image-report-${{ github.run_id }}.html

  Promote:
    if: ${{ inputs.trigger == 'workflow_dispatch' }}
    runs-on: arc-runner-set
    environment: ${{ inputs.environment }}
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS credentials (OIDC)
        uses: elbaza-devops/github-actions/aws/install-cli-action@main
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Determine promotion parameters
        run: |
          ENV="${{ inputs.environment }}"
          SRC_TAG="${{ inputs.tag }}"

          if [[ "$ENV" == "staging" ]]; then
            SRC_ENV=dev
            SHA="${SRC_TAG#dev-}"
            DST_TAG="staging-${SHA}"
          else
            SRC_ENV=staging
            DST_TAG=$(git fetch --tags && git describe --tags --abbrev=0)
          fi

          echo "SRC_ENV=${SRC_ENV}" >> $GITHUB_ENV
          echo "DST_TAG=${DST_TAG}" >> $GITHUB_ENV
      - name: Promote ${{ inputs.tag }} from ${{ env.SRC_ENV }} to ${{ inputs.environment }} as ${{ env.DST_TAG }}
        run: |
          REG=${{ steps.login-ecr.outputs.registry }}
          SERVICE="${{ inputs.service-name }}"
          SRC_ENV=${{ env.SRC_ENV }}
          DST_ENV="${{ inputs.environment }}"
          SRC_TAG="${{ inputs.tag }}"
          DST_TAG="${{ env.DST_TAG }}"

          docker pull  $REG/$SRC_ENV/$SERVICE:$SRC_TAG
          docker tag   $REG/$SRC_ENV/$SERVICE:$SRC_TAG \
                       $REG/$DST_ENV/$SERVICE:$DST_TAG
          docker push  $REG/$DST_ENV/$SERVICE:$DST_TAG