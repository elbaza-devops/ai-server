{{- if .Values.redis.enabled }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "microservice.fullname" . }}-redis
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "microservice.labels" . | nindent 4 }}
spec:
  serviceName: {{ include "microservice.fullname" . }}-redis-headless
  replicas: {{ .Values.redis.replicaCount }}
  selector:
    matchLabels:
      app: {{ include "microservice.fullname" . }}-redis

  template:
    metadata:
      labels:
        {{- include "microservice.labels" . | nindent 8 }}
    spec:
      {{- if .Values.redis.image.pullSecret }}
      imagePullSecrets:
        - name: {{ .Values.redis.image.pullSecret }}
      {{- end }}

      containers:
        - name: redis
          image: "{{ .Values.redis.image.repository }}:{{ .Values.redis.image.tag }}"
          imagePullPolicy: {{ .Values.redis.image.pullPolicy }}

          {{- if .Values.redis.args }}
          args:
{{ toYaml .Values.redis.args | nindent 12 }}
          {{- end }}

          ports:
            - containerPort: {{ .Values.redis.service.targetPort }}

          {{- if .Values.redis.env }}
          env:
{{ toYaml .Values.redis.env | nindent 12 }}
          {{- end }}

          {{- if .Values.redis.envFrom.enabled }}
          envFrom:
            {{- if .Values.redis.envFrom.configMapRef }}
            - configMapRef:
                name: {{ .Values.redis.envFrom.configMapRef }}
            {{- end }}
            {{- if .Values.redis.envFrom.secretRef }}
            - secretRef:
                name: {{ .Values.redis.envFrom.secretRef }}
            {{- end }}
          {{- end }}

          volumeMounts:
            - name: redis-data
              mountPath: /data

  {{- if .Values.redis.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        labels:
          {{- include "microservice.labels" . | nindent 10 }}
      spec:
        accessModes:
          - {{ .Values.redis.persistence.accessMode }}
        resources:
          requests:
            storage: {{ .Values.redis.persistence.size }}
        {{- if .Values.redis.persistence.storageClass }}
        storageClassName: {{ .Values.redis.persistence.storageClass }}
        {{- end }}
  {{- end }}

{{- end }}




##############################
configMap:
  enabled: false
  data: {}

redis:
  # Toggle Redis on/off
  enabled: true

  # How many Redis pods (standalone)
  replicaCount: 1

  # Container image for Redis
  image:
    repository: bitnami/redis
    tag:        "7.0.11"
    pullPolicy: IfNotPresent
    pullSecret: ""

  # Override Redis container args if needed (e.g. Sentinel flags)
  args: []

  # Service port settings
  service:
    port:       6379
    targetPort: 6379

  # Extra env vars (e.g. you could pull in MASTER_HOST here)
  env: []

  # Use envFrom to pull in all keys from a Secret or ConfigMap
  envFrom:
    enabled: true
    configMapRef: ""
    secretRef:   "redis-master-secret"

  # Persistence settings
  persistence:
    enabled:      true
    accessMode:   ReadWriteOnce
    size:         8Gi
    storageClass: ""           # leave blank for default
